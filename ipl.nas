; kusa-os
; TAB=4

		ORG		0x7c00			;プログラムの開始点のメモリ番地を指定する

; 以下は標準的なFAT12フォーマットフロッピーディスクのための記述

		JMP		entry			
		DB		0x90
		DB		"kusa-IPL"		; ブートセクタの名前を自由に書いてよい（8バイト）
		DW		512				; 1セクタの大きさ（512にしなければいけない）
		DB		1				; クラスタの大きさ（1セクタにしなければいけない）
		DW		1				; FATがどこから始まるか（普通は1セクタ目からにする）
		DB		2				; FATの個数（2にしなければいけない）
		DW		224				; ルートディレクトリ領域の大きさ（普通は224エントリにする）
		DW		2880			; このドライブの大きさ（2880セクタにしなければいけない）
		DB		0xf0			; メディアのタイプ（0xf0にしなければいけない）
		DW		9				; FAT領域の長さ（9セクタにしなければいけない）
		DW		18				; 1トラックにいくつのセクタがあるか（18にしなければいけない）
		DW		2				; ヘッドの数（2にしなければいけない）
		DD		0				; パーティションを使ってないのでここは必ず0
		DD		2880			; このドライブ大きさをもう一度書く
		DB		0,0,0x29		; よくわからないけどこの値にしておくといいらしい
		DD		0xffffffff		; たぶんボリュームシリアル番号
		DB		"kusa-OS    "	; ディスクの名前（11バイト）
		DB		"FAT12   "		; フォーマットの名前（8バイト）
		RESB	18				; とりあえず18バイトあけておく

; プログラム本体

entry:
		MOV		AX,0			; レジスタ初期化
		MOV		SS,AX			;AXを代入するということは、イコール0を代入する事と同じ。
		MOV		SP,0x7c00		;スタックポインタにORG命令で指定したIPLの開始位置を代入
		MOV		DS,AX
		MOV		ES,AX

; ディスクを読み込む
		MOV		AX,0x0820		; 0x8000~0x81ffまでの512バイトは後でブートセクタの内容をいれるので、0x8200を使う。
		MOV		ES,AX			; ESには直接値を入れられないのでAXを介して入れている。
		MOV		CH,0			; シリンダ0
		MOV		DH,0			; ヘッド0
		MOV		CL,2			; セクタ2 これでブートセクタの次が読み込める

		MOV		AH,0x02			; AH=0x02 : ディスク読み込み
		MOV 	AL,1			; 1セクタ
		MOV		BX,0			; バッファアドレスのオフセットアドレス(細かいメモリ番地)を指定
		MOV		DL,0x00			; Aドライブ
		INT		0x13			; ディスク関連のBIOS機能呼び出し
		JC		error			; JC命令「Jamp if Carry」　INT0x13でエラーがあるとキャリーフラグが1になる。

		MOV		SI,msg			; ソースインデックスにmsg:ラベルのメモリ番地を入れる

; 読み込みが終わって終わり

fin:
		HLT						; 何かあるまでCPU停止
		JMP		fin				; finラベルへ飛ぶので実質無限ループ

error:
		MOV		SI,msg			; msgラベルのメモリ番地をソースインデックスにセット

putloop:
		MOV		AL,[SI]			;msgの中身の先頭をALに代入
		ADD		SI,1			;ソースインデックスに1を足してmsgの次の文字のメモリ番地を示すようにする
		CMP		AL,0			;msgが最後まで行ったら空になるので、0かどうか比較している
		JE		fin				;比較の結果0ならばfin：ラベルへジャンプ
		MOV		AH,0x0e			;比較が0でなければ続く。一文字表示したいのでビデオ割り込みの一文字表示のためにレジスタをセット
		MOV		BX,15			;BHは0でよく、BLはカラーコードを指定。FFFFは白なので15を入れると0x0000FFFFとなる。
		INT		0x10			;ビデオ関連のソフトウェア割り込みを呼び出す
		JMP		putloop			;一文字づつ表示なので、putloopに戻って繰り返す。（0ならfinに抜ける）

; メッセージ部分
msg:
		DB		0x0a, 0x0a		; 改行を2つ
		DB		"hello, I'm kusaOS!"
		DB		0x0a			; 改行
		DB		0

		RESB	0x7dfe-$			; 0x07dfeまでを0x00で埋める命令

		DB		0x55, 0xaa
